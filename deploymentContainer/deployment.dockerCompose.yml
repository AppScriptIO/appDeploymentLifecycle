version: '2.2'
# Tests & Build: source code --> distribution code

# USAGE (from root directory): docker-compose -f <filePath> up <service>
services:
    
    nodejs: # Build source code & download project dependencies.
        image: myuserindocker/deployment-environment:latest
        environment:
            DEPLOYMENT: ${DEPLOYMENT:-production}
        volumes:
            - ${hostPath}/dependency:/project/application/dependency # The hostPath is forwarded from the manager contaienr to the host vm. i.e. the manager doesn't container `/c/Users/` but the host vm does.
            - ${hostPath}/setup:/project/application/setup
            - ${hostPath}/source:/project/application/source
            - ${hostPath}/distribution:/project/application/distribution
        working_dir: /project/application/setup/build/
        entrypoint: /project/application/setup/container/shellScript/buildSourceCode.entrypoint.sh
        working_dir: /project/application
        command: bash -c "sleep 100000000;"

    # localUnitTest:
    #     extends: deploymentEnvironment
    #     container_name: unit
    #     volumes:
    #       - ../../distribution:/app/
    #       - ../../setup/container/shellScript:/tmp/shellScript/
    #       - ../../setup/test/:/tmp/test/
    #     working_dir: /tmp/test/
    #     # entrypoint allows cd command to work, in command: bash it doesn't.
    #     # entrypoint: /tmp/shellScript/localUnitTest.sh
    #     command: bash -c "npm install; npm run test;"

    # localStagingTest:
    #     extends: deploymentEnvironment
    #     container_name: staging
    #     volumes:
    #       - ../../setup/container/shellScript:/tmp/shellScript/
    #       - ../../setup/test/:/tmp/test/
    #     environment:
    #         - HOST_IP=localhost:80
    #     network_mode: host
    #     working_dir: /tmp/test/
    #     # entrypoint: /tmp/shellScript/localStagingTest.sh
    #     # command: bash -c "printenv"
    #     command: bash -c "npm install; npm run localStagingTest;"

    # Used only to build image.
    buildImage:
        build:
            context: ../../../
            dockerfile: ${hostPath}/appDeploymentLifecycle/deploymentContainer/service.dockerfile
            args:
                - DEPLOYMENT=${DEPLOYMENT:-production}
        image: myuserindocker/${imageName}:latest # tag for created/built image # name of local image to be built
