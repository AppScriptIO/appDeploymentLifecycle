version: '3.7'
# Tests & Build: source code --> distribution code
# The 'applicationPathOnHostMachine' is the path on the machine which docker engine runs in. In case of containers the docker client usually forwards commands to the host machine, therefore paths should be absolute to host machine        working_dir: /project/application
# USAGE (from root directory): docker-compose -f <filePath> up <service>
services:
    
    nodejs: 
        image: node:latest
        stdin_open: true # to allow for passing kill signals to the container from the terminal.
        tty: true
        environment:
            DEPLOYMENT: ${DEPLOYMENT:-production}
            DISTRIBUTION: ${DISTRIBUTION}
        ports:
            - "9229:9229" # Node's remote debugger 
        volumes:
            - ${applicationPathOnHostMachine}/:/project/application/
        command: bash -c "echo '[dockerCompose yml] No command or entrypoint specifies for the container.';"

    # localUnitTest:
    #     extends: deploymentEnvironment
    #     container_name: unit
    #     volumes:
    #       - ../../distribution:/app/
    #       - ../../setup/container/shellScript:/tmp/shellScript/
    #       - ../../setup/test/:/tmp/test/
    #     working_dir: /tmp/test/
    #     # entrypoint allows cd command to work, in command: bash it doesn't.
    #     # entrypoint: /tmp/shellScript/localUnitTest.sh
    #     command: bash -c "npm install; npm run test;"

    # localStagingTest:
    #     extends: deploymentEnvironment
    #     container_name: staging
    #     volumes:
    #       - ../../setup/container/shellScript:/tmp/shellScript/
    #       - ../../setup/test/:/tmp/test/
    #     environment:
    #         - HOST_IP=localhost:80
    #     network_mode: host
    #     working_dir: /tmp/test/
    #     # entrypoint: /tmp/shellScript/localStagingTest.sh
    #     # command: bash -c "printenv"
    #     command: bash -c "npm install; npm run localStagingTest;"

    # Used only to build image.
    buildImage:
        build:
            context: ../../../
            dockerfile: /project/application/dependency/appDeploymentLifecycle/deploymentContainer/service.dockerfile
            args:
                - DEPLOYMENT=${DEPLOYMENT:-production}
                - DISTRIBUTION=${DISTRIBUTION}

        image: myuserindocker/${imageName}:latest # tag for created/built image # name of local image to be built
