# the overhead of getting the setup to run is just too much for creating a professional development environment.
# General notes and issues encountered during setting up kvm with passthrough to a Windows geust: 
- switching between GPU and integrated graphics seems problematic. (integrated CPU graphics not showing up as regular GPU Iommu device).
- Multiple screen setup for the geust Windows vm. 
- patches for ACL IOMMu shared in same group.
- Device ID for 2 graphics card the same. Using device address isn't supported out of the box.
- Linux support for drivers for keyboard lighting, quiet fan speeds, required third party implementations for Clevo based laptops.
- dealing with drivers in the geust VM is limited, and not all motherboard options are exposed to the VM (like controlling fan speeds, or keyboard lighting)
- Canno seem to passthrough 2 GPUs to the VM, because switching to integrated CPU graphics doesn't appear as an option.
- linux handling of multiple screens isn't the best.
- hibernation not activated by default. 
- ...
# projects looked through: 
- looking glass - copying gpu frames directly from geust windows (running a server) to the host machine graphics (running a client).
- Ubuntu Pop OS - with good but not enough features for multiple display.
- Logical volume manager and snapshots.

###### CONCLUSIONS 
- Setting up a KVM in theory that supported native Graphics performance is a great concept, allowing to control the WIndows installation and run several operating system geusts each for its own purpose and exposing only the necessary devices to them. 
- The overhead of created such setup required a lot of tial and error, as the tools are separate and not all mature enough. Overcoming the limitations of the system put by vendors is not easy. 
Therefore installing Windows as dual boot will just make the allow less time waste and get the job done. At the end the creating a complex setup won't lead to generating revenue by itself.

_______________________________________________________

# other links 
https://www.youtube.com/watch?v=PLy1n7X2cAU
https://forum.level1techs.com/t/vfio-in-2019-pop-os-how-to-general-guide-though-draft/142287

# Multiple screen DPI 
https://askubuntu.com/questions/393400/is-it-possible-to-have-different-dpi-configurations-for-two-different-screens
https://askubuntu.com/questions/1043337/ubuntu-18-04-login-screen-display-settings

# xrandr --output DP-3 --auto --scale 2x2 # scale down twice because of the general 200% scale for all screens that cannot be configured separately
#xrandr --output DP-0 --scale 0.5x0.5 --output HDMI-0 --left-of DP-0 --output DP-2 --right-of DP-0
xrandr 	--output HDMI-0 --auto --scale 2x2 \
	--output DP-0 --auto --right-of HDMI-0 \
	--output DP-2 --auto --scale 2x2 --right-of DP-0

#reset xrandr to default in case something fails
xrandr -s 0

# keyboard light
https://forums.linuxmint.com/viewtopic.php?t=287190
### SZN notes: 
The originpc is created by Clevo manufactury (Clevo motherboard) with American Trends Bios. 
Follow https://forums.linuxmint.com/viewtopic.php?t=287190
The model is Clevo P870DM

Run inside "module" folder `make`, then run `sudo insmod clevo-xsm-wmi.ko`
	Fn / will cycle through basic colours
	Fn * will turn the LED's on and off
	Fn + & - will adjust the brightness


# fan control
http://forum.notebookreview.com/threads/clevo-fan-control-for-linux.825658/
https://www.techinferno.com/index.php?/forums/topic/10746-software-mod-linux-fan-control-for-clevo-p775dm3/
https://github.com/tuxedocomputers/tuxedo-keyboard
https://github.com/hirschmann/nbfc

# On ubuntu 19.04
sudo -i # signin as root
apt-get update && apt-get upgrade
apt install gparted git synaptic # "Synaptic Package Manager"

#install from ubuntu 


# Arabic language support
https://ubuntuforums.org/showthread.php?t=1451241 # not working properly

# file manager - list view as default
gsettings set org.gnome.nautilus.preferences default-folder-viewer 'list-view'

# Add hibernate to ubuntu 19
https://outhereinthefield.wordpress.com/2019/05/21/enabling-hibernate-on-ubuntu-19-04-disco-dingo/


# Intall kvm, qemu, bridge interface, gui virtual manager, ovmf (UEFI support to VMs)
sudo apt install -y qemu-kvm virt-manager libguestfs-tools ovmf bridge-utils
# Add user to libvirt group
sudo gpasswd libvirt -a <username>
sudo reboot

# Enable passthrought devices: 
sudo nano /etc/default/grub
# add the iommu parameters to the option in: 
GRUB_CMDLINE_LINUX_DEFAULT="intel_iommu=on iommu=pt"
sudo update-grub
# verify iommu is enabled: 
dmesg | grep -i iommu


### NOTE: seabios is not a UEFI.
# If encountring problems with defautl OVMF's UEFI, then change to a different bios for KVM instead of QVMF's UEFI images: 
The default UEFI WORKS, don't forget to press Enter for CDROM to load.
# iNSTALLING Windows from a CDROM in a VM that writes to disk directly: 
Remember that if UEFI in the VM works correctly the options in partitioning should show the creation of: System (EFI partion), Recovery, MSR, and Primary partitions. As opposed to having 2 partions for MBR (Bios).
# Note: installation from a VM and usage directly from the main computer bios, maybe causing issues when trying to boot after shutdown to the Windows OS where the Boot logo (OriginPC Logo) gets stuck for a while, the the computer shuts down.

# seabios is a bios not a uefi !!!
# https://fabianlee.org/2018/09/13/kvm-building-the-latest-seabios-firmware-for-virtual-machines/
sudo dpkg -L seabios 
cd ~/Documents/ && git clone https://github.com/coreboot/seabios.git && cd ./seabios && make
mv ./out/ /usr/share/OVMF/seaBios # for organization purposes only.

# then after creating the vm with OVMF's UEFI, change it to seaBios/bios.bin
virsh edit <vm-name>
### edit xml option <loader> to /usr/share/OVMF/seaBios/bios.bin



# Sign external kernel modules to for working with secure boot on: 
https://github.com/aneesh-neelam/UEFI-SecureBoot-SignTool
https://gist.github.com/dop3j0e/2a9e2dddca982c4f679552fc1ebb18df
# https://queuecumber.gitlab.io/linux-acs-override/
sudo dpkg -i *.deb # on the downloaded artifact (Downlaod All link)

# Split IMMOU groups for 1 device in each group: 
for d in /sys/kernel/iommu_groups/*/devices/*; do n=${d#*/iommu_groups/*}; n=${n%%/*}; printf 'IOMMU Group %s ' "$n"; lspci -nns "${d##*/}"; done;

10de:10f0,10de:1be0

#https://www.linuxbabe.com/desktop-linux/switch-intel-nvidia-graphics-card-ubuntu
# https://forum.level1techs.com/t/how-to-apply-acs-override-patch-kubuntu-18-10-kernel-4-18-16/134204/2
# https://serverfault.com/questions/834856/splitting-an-iommu-group-for-pcie-passthrough
https://queuecumber.gitlab.io/linux-acs-override/
# https://forums.unraid.net/topic/72027-iommu-group-splitting-for-pcie-passthrough-no-success-please-help/
# ACS patches
https://gist.github.com/mdPlusPlus/031ec2dac2295c9aaf1fc0b0e808e21a
https://queuecumber.gitlab.io/linux-acs-override/


# To switch back to Intel graphics, simply select Intel in PRIME Profiles. You can also use terminal commands to switch graphics card. For example, this command will switch to Intel graphics card.
sudo prime-select intel
# To switch to Nvidia card:
sudo prime-select nvidia
# To check which card is being used right now, run this command:
prime-select query


## Disk cache mode: 
https://doc.opensuse.org/documentation/leap/virtualization/html/book.virt/cha.cachemodes.html

# turnoff swap and remove partition
`swapoff -a`

# repair boot -
https://www.howtogeek.com/114884/how-to-repair-grub2-when-ubuntu-wont-boot/
