##
 # OLD version now in use. this was directly invoked while currently more docker-compose options are called from nodejs container (containerManagement).
##
#!/usr/bin/env bash

deployment.buildDockerFile() {
    docker-compose -f ./deployment.dockerCompose.yml build --no-cache deploymentEnvironment
}

deployment.AndPush() {
    # 0. Point the docker engine to the docker-machine as active, & cd to the folder of the project.

    # 1. Build image
    docker-compose -f ./deployment.dockerCompose.yml build --no-cache deploymentEnvironment
    
    # 2. tag image to docker hub.
    # docker tag deployment-environment myuserindocker/deployment-environment:latest
    docker push myuserindocker/deployment-environment
}

production.runForTesting() {
    docker-compose -f ./deployment.dockerCompose.yml up -d --force-recreate deploymentEnvironmentImage
}

deployment.containerDeploymentManagement() { 
    # https://medium.com/lucjuggery/about-var-run-docker-sock-3bfd276e12fd
        # docker-compose -f ./deployment.dockerCompose.yml up -d --force-recreate --privileged deploymentEnvironmentImage // with giving privilged access to all host capabilities of host root user.
        docker-compose -f ./deployment.dockerCompose.yml up -d --force-recreate deploymentEnvironmentImage
}

# Important: call arguments verbatim. i.e. allows first argument to call functions inside file. So that it could be called as "./setup/entrypoint.sh <functionName>".
$@
